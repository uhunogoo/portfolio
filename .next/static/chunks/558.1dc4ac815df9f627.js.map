{"version":3,"file":"static/chunks/558.1dc4ac815df9f627.js","mappings":"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","sources":["webpack://_N_E/./src/lib/sources.js","webpack://_N_E/./src/lib/useResources.js","webpack://_N_E/<anon>"],"sourcesContent":["function support_format_webp() {\r\n  if (typeof window !== \"undefined\") {\r\n    const elem = document.createElement('canvas');\r\n\r\n    if (!!(elem.getContext && elem.getContext('2d'))) {\r\n      // was able or not to get WebP representation\r\n      return (\r\n        elem.toDataURL('image/webp').indexOf('data:image/webp') == 0\r\n      );\r\n    } else {\r\n      // very old browser like IE 8, canvas not supported\r\n      return false;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst isWebpSupport = support_format_webp();\r\nconst formatJPG = isWebpSupport ? '.webp' : '.jpg';\r\nconst formatPNG = isWebpSupport ? '.webp' : '.png';\r\n\r\nexport default [\r\n  // MODELS\r\n  {\r\n    name: 'towerModel',\r\n    type: 'gltfLoader',\r\n    path: '/models/tower-model.glb',\r\n  },\r\n  //  TOWER\r\n  {\r\n    name: 'largeTexture',\r\n    type: 'texture',\r\n    asset: 'startParams',\r\n    path: `/textures/largeTexture${formatJPG}`,\r\n  },\r\n  {\r\n    name: 'otherTextures',\r\n    type: 'texture',\r\n    asset: 'startParams',\r\n    path: `/textures/otherTextures${formatJPG}`,\r\n  },\r\n  {\r\n    name: 'shadowMap',\r\n    type: 'texture',\r\n    asset: 'startParams',\r\n    path: `/textures/shadowMap${formatJPG}`,\r\n  },\r\n  {\r\n    name: 'sandTexture',\r\n    type: 'texture',\r\n    asset: 'startParams',\r\n    path: `/textures/sand${formatJPG}`,\r\n  },\r\n  {\r\n    name: 'groundTexture',\r\n    type: 'texture',\r\n    asset: 'startParams',\r\n    path: `/textures/forest${formatJPG}`,\r\n  },\r\n  //  Grass\r\n  {\r\n    name: 'grassTexture',\r\n    type: 'texture',\r\n    path: `/textures/grass-1${formatPNG}`,\r\n  },\r\n  {\r\n    name: 'grassSecondTexture',\r\n    type: 'texture',\r\n    path: `/textures/grass-2${formatPNG}`,\r\n  },\r\n  //  Fire\r\n  {\r\n    name: 'fireTexture',\r\n    type: 'texture',\r\n    path: `/textures/fire${formatJPG}`,\r\n  },\r\n  //  Clouds\r\n  {\r\n    name: 'cloud',\r\n    type: 'texture',\r\n    path: `/textures/cloud${formatPNG}`,\r\n  },\r\n];\r\n","import React from 'react';\r\nimport { LinearFilter, sRGBEncoding, TextureLoader } from 'three';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { PreloadedContext } from '../components/PreloadedContentProvider/PreloadedContentProvider';\r\nimport sources from './sources';\r\n\r\nexport default function useResources({ setLoadingProgress }) {\r\n  if (sources.length === 0) return;\r\n  const { setPreloadedContent } = React.useContext( PreloadedContext );\r\n  const totalCount = sources.length;\r\n  const [items, setItems] = React.useState([]);\r\n\r\n  const loaders = React.useMemo(() => {\r\n    const textureLoader = new TextureLoader();\r\n\r\n    const dracoLoader = new DRACOLoader();\r\n    const gltfLoader = new GLTFLoader();\r\n    dracoLoader.setDecoderPath('/draco/');\r\n    gltfLoader.setDRACOLoader(dracoLoader);\r\n\r\n    return {\r\n      textureLoader,\r\n      gltfLoader,\r\n    };\r\n  }, []);\r\n  \r\n  // Start loading\r\n  React.useEffect(() => {\r\n    const intervalId = window.setTimeout(() => {\r\n      sources.map((source) => {\r\n        manageLoading( source, loaders, setItems )\r\n      });\r\n    }, 3000);\r\n    \r\n    // When I'm ready to stop the interval, I'd run:\r\n    return () => {\r\n      window.clearTimeout(intervalId);\r\n    };\r\n    \r\n  }, [ loaders ]);\r\n\r\n  React.useEffect(() => {\r\n    setLoadingProgress( ( items.length / totalCount ) * 100 );\r\n    \r\n    if (items.length === totalCount) {\r\n      setPreloadedContent( items );\r\n    }\r\n  }, [ setLoadingProgress, items ])\r\n  \r\n  if ( items.length !== totalCount ) return [];\r\n\r\n}\r\n\r\nasync function manageLoading( source, loaders, setItems ) {\r\n  let response;\r\n  \r\n  if (source.type === 'texture') {\r\n    response = await loaders.textureLoader.loadAsync( source.path );\r\n  } else if (source.type === 'gltfLoader') {\r\n    response = await loaders.gltfLoader.loadAsync( source.path );\r\n  }\r\n\r\n  if (!response) return;\r\n  const newItem = {\r\n    name: source.name,\r\n    item: response\r\n  };\r\n  setItems( currentItems => {\r\n    const isExist = currentItems?.find(el => \r\n      el.name === newItem.name \r\n    ); \r\n\r\n    if ( isExist ) return [...currentItems ]; \r\n    return [...currentItems, newItem];\r\n  });\r\n}\r\n"],"names":["isWebpSupport","support_format_webp","elem","document","createElement","getContext","toDataURL","indexOf","formatJPG","formatPNG","sources","name","type","path","asset","concat","useResources","param","setLoadingProgress","setPreloadedContent","React","PreloadedContext","totalCount","items","setItems","loaders","textureLoader","TextureLoader","dracoLoader","DRACOLoader","gltfLoader","GLTFLoader","setDecoderPath","setDRACOLoader","intervalId","window","setTimeout","manageLoading","source","clearTimeout","length","response","loadAsync","newItem","item","currentItems","isExist","find","el"],"sourceRoot":""}